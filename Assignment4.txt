Q1. How do you load a CSV file into a Pandas DataFrame?

A) step1:import pandas library
   step2:load the CSV file into pandas DataFrame

Example:

import pandas as pd

df = pd.read_csv('data.csv')

print(df.to_string()) 

output:


     Duration  Pulse  Maxpulse  Calories
0          60    110       130     409.1
1          60    117       145     479.0
2          60    103       135     340.0
3          45    109       175     282.4
4          45    117       148     406.0
5          60    102       127     300.5


Q2. How do you check the data type of a column in a Pandas DataFrame?

A)To check the data type in pandas DataFrame we can use the “dtypes” attribute.

Example:

#df is a DataFrame
data_type=df.dtypes

Q3. How do you select rows from a Pandas DataFrame based on a condition?

A)we can us '>', '=', '=', '<=', '!=' operators.

   # selecting rows based on condition
   #df is a DataFrame
   rslt_df = df.loc[df['Pulse'] > 110]

output:


     Duration  Pulse  Maxpulse  Calories
0          60    110       130     409.1
1          60    117       145     479.0
2          45    117       148     406.0


Q4. How do you rename columns in a Pandas DataFrame?

A) By using rename() method we can change the name of the column

Example:
#df is a DataFrame
df.rename(columns = {'Duration':'Time'}, inplace = True)



Q5. How do you drop columns in a Pandas DataFrame?

A) By using drop() method we can delete a column

Example:
#df is a DataFrame
df.drop(['Calories'],axis=1)
 

Q6. How do you find the unique values in a column of a Pandas DataFrame?

A) By using unique() we can get unique values in  column

Example:

#df is a DataFrame

df.Pulse.unique()


Q7. How do you find the number of missing values in each column of a Pandas DataFrame?

A) By using isnull() method we can find the missing values in each column

Example:

#df is a DataFrame

print(df.isnull())



Q8. How do you fill missing values in a Pandas DataFrame with a specific value?

A) The fillna() function iterates through your dataset and fills all empty rows with a specified value. This could be the mean, median, modal, or any other value.

Syntax: 

DataFrame.fillna(value=None, method=None, axis=None, inplace=False, limit=None, downcast=None, **kwargs)

Example:

#df is a DataFrame

df['Calories'].fillna(0,inplace=True)


Q9. How do you concatenate two Pandas DataFrames?

A) By using concat() method we can combine two DataFrames

Example:

#df1 and df2 are two DataFrames
#pd is pandas aliyas name

comb=[df1,df2]
result=pd.concat(comb)
 
Q10. How do you merge two Pandas DataFrames on a specific column?

A) We can merge two Pandas DataFrames on certain columns using the merge function by simply specifying the certain columns for merge. 

Syntax: 

   DataFrame.merge(right, how=’inner’, on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, copy=True, indicator=False, validate=None)

Example:

import pandas as pd

df1 = pd.DataFrame({'Name':['Raju', 'Rani', 'Geeta', 'Sita', 'Sohit'],
					'Marks':[80, 90, 75, 88, 59]})

df2 = pd.DataFrame({'Name':['Raju', 'Divya', 'Geeta', 'Sita'],
					'Grade':['A', 'A', 'B', 'A'],
					'Rank':[3, 1, 4, 2 ],
					'Gender':['Male', 'Female', 'Female', 'Female']})

# applying merge
df1.merge(df2[['Name', 'Grade', 'Rank']])



Q11. How do you group data in a Pandas DataFrame by a specific column and apply an aggregation function?

A)
 
import pandas as pd
data = {"Team": ["Red Sox", "Red Sox", "Red Sox", "Red Sox", "Red Sox", "Red Sox", "Yankees", "Yankees", "Yankees", "Yankees", "Yankees", "Yankees"],
		"Pos": ["Pitcher", "Pitcher", "Pitcher", "Not Pitcher", "Not Pitcher", "Not Pitcher", "Pitcher", "Pitcher", "Pitcher", "Not Pitcher", "Not Pitcher", "Not Pitcher"],
		"Age": [24, 28, 40, 22, 29, 33, 31, 26, 21, 36, 25, 31]}
df = pd.DataFrame(data)
print(df)

# group by Team, get mean, min, and max value of Age for each value of Team.
grouped_single = df.groupby('Team').agg({'Age': ['mean', 'min', 'max']})

print(grouped_single)

Output:

Team	mean	   min	max
Red Sox	29.333333	22	40
Yankees	28.333333	21	36



Q12. How do you pivot a Pandas DataFrame?

A) The pivot() function is used to reshape a given DataFrame organized by given index/column values. This function does not support data aggregation, multiple values will result in a MultiIndex in the columns.

Syntax:

DataFrame.pivot(self, index=None, columns=None, values=None)

Example:

import numpy as np
import pandas as pd
df = pd.DataFrame({'fff': ['one', 'one', 'one', 'two', 'two',
                           'two'],
                   'bbb': ['P', 'Q', 'R', 'P', 'Q', 'R'],
                   'baa': [2, 3, 4, 5, 6, 7],
                   'zzz': ['h', 'i', 'j', 'k', 'l', 'm']})
df

Output:


fff	bbb	baa	zzz
0	one	P	2	h
1	one	Q	3	i
2	one	R	4	j
3	two	P	5	k
4	two	Q	6	l
5	two	R	7	m

#Using pivot function

df.pivot(index='fff', columns='bbb', values='baa')


Output:

bbb	P	Q	R
fff			
one	2	3	4
two	5	6	7

Q13. How do you change the data type of a column in a Pandas DataFrame?

A) There are different ways of changing DataType for one or more columns in Pandas Dataframe. 

 Example :  .astype(), .convert_dtypes() and.to_numeric()

Change column type into string object using DataFrame.astype() 

# importing pandas as pd
import pandas as pd


df = pd.DataFrame({
	'A': [1, 2, 3, 4, 5],
	'B': ['a', 'b', 'c', 'd', 'e'],
	'C': [1.1, '1.0', '1.3', 2, 5]})

# converting all columns to string type
df = df.astype(str)
print(df.dtypes)


Q14. How do you sort a Pandas DataFrame by a specific column?

A) By using sort_values to sort the df by a specific column's values.

Example:
#df is a DataFrame

df.sort_values('column_name')



Q15. How do you create a copy of a Pandas DataFrame?

A) The copy() method returns a copy of the DataFrame. By default, the copy is a "deep copy" meaning that any changes made in the original DataFrame will NOT be reflected in the copy.

Exqample: 

import pandas as pd

data = {
  "name": ["Sally", "Mary", "John"],
  "qualified": [True, False, False]
}

df = pd.DataFrame(data)

#Make a copy:

newdf = df.copy()

print(newdf)

Output:

      name  qualified
  0  Sally       True
  1   Mary      False
  2   John      False



Q16. How do you filter rows of a Pandas DataFrame by multiple conditions?

A) By using loc method we can filter the rows.

# import module
import pandas as pd

# assign data
dataFrame = pd.DataFrame({'Name': [' RACHEL ', ' MONICA ', ' PHOEBE ',
								' ROSS ', 'CHANDLER', ' JOEY '],
						
						'Age': [30, 35, 37, 33, 34, 30],
						
						'Salary': [100000, 93000, 88000, 120000, 94000, 95000],
						
						'JOB': ['DESIGNER', 'CHEF', 'MASUS', 'PALENTOLOGY',
								'IT', 'ARTIST']})
# filter dataframe
display(dataFrame.loc[(dataFrame['Salary']>=100000) & (dataFrame['Age']< 40) & (dataFrame['JOB'].str.startswith('D')),
					['Name','JOB']])
Output:

    Name  Job
0   Teja   DataEngineer



Q17. How do you calculate the mean of a column in a Pandas DataFrame?

A) By using a mean() function we can calculate the mean of the column in pandas dataframe.

Example:

# importing pandas as pd
import pandas as pd

# Creating the dataframe
df = pd.DataFrame({"A":[12, 4, 5, 44, 1],
				"B":[5, 2, 54, 3, 2],
				"C":[20, 16, 7, 3, 8],
				"D":[14, 3, 17, 2, 6]})

df.mean()

Output:

A 13.2
B 13.2
C 10.8
D 8.4 



Q18. How do you calculate the standard deviation of a column in a Pandas DataFrame?

A) Standard deviation is calculated using the function .std(). However, the Pandas library creates the Dataframe object and then the function .std() is applied on that Dataframe.

Example:


import pandas as pd
import numpy as np
 
#Create a DataFrame
d = {
    'Name':['Alisa','Bobby','Cathrine','Madonna','Rocky','Sebastian','Jaqluine',
   'Rahul','David','Andrew','Ajay','Teresa'],
   'Score1':[62,47,55,74,31,77,85,63,42,32,71,57],
   'Score2':[89,87,67,55,47,72,76,79,44,92,99,69],
   'Score3':[56,86,77,45,73,62,74,89,71,67,97,68]}

df = pd.DataFrame(d)
answer= df.std()
print("The standard deviations of the 3 columns are:")
print (answer)

Output:

The standard deviations of the 3 columns are:
Score1    17.446021
Score2    17.653225
Score3    14.355603
dtype: float64



Q19. How do you calculate the correlation between two columns in a Pandas DataFrame?

A) By using corr() function we can get the correlation between two columns in the dataframe.

Syntax:

dataframe[‘first_column’].corr(dataframe[‘second_column’])

Example:

# import pandas module
import pandas as pd

# create dataframe with 3 columns
data = pd.DataFrame({
	"column1": [12, 23, 45, 67],
	"column2": [67, 54, 32, 1],
	"column3": [34, 23, 56, 23]
}
)
# display dataframe
print(data)

# correlation between column 1 and column2
print(data['column1'].corr(data['column2']))

# correlation between column 2 and column3
print(data['column2'].corr(data['column3']))

# correlation between column 1 and column3
print(data['column1'].corr(data['column3']))


Output:

 column1  column2  column3
0       12       67       34
1       23       54       23
2       45       32       56
3       67        1       23
-0.9970476685163736
0.07346999975265099
0.0



Q20. How do you select specific columns in a DataFrame using their labels?

A)Selecting columns based on their name
This is the most basic way to select a single column from a dataframe, just put the string name of the column in brackets. Returns a pandas series.

Example:
#df is a DataFrame
#hue is a column name
df['hue']


Q21. How do you select specific rows in a DataFrame using their indexes?

A) By using pandas.iloc[Row_Index]


Q22. How do you sort a DataFrame by a specific column?

A) To sort the DataFrame based on the values in a single column, you’ll use .sort_values(). By default, this will return a new DataFrame sorted in ascending order. It does not modify the original DataFrame.

Example: 
#df is a DataFrame
df.sort_values("column_name")


Q23. How do you create a new column in a DataFrame based on the values of another column?

A) Using apply() method
If you need to apply a method over an existing column in order to compute some values that will eventually be added as a new column in the existing DataFrame, then pandas. DataFrame. apply() method should do the trick.


Q24. How do you remove duplicates from a DataFrame?

A) Pandas drop_duplicates() method helps in removing duplicates from the Pandas Dataframe.


Q25. What is the difference between .loc and .iloc in Pandas?

A) ->loc is label-based, which means that you have to specify rows and columns based on their row and column labels.
   ->iloc is integer position-based, so you have to specify rows and columns by their integer position values (0-based integer position)