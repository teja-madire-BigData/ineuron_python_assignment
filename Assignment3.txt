Q1. What is the purpose of Python's OOP?

A) It aims to implement real-world entities like inheritance, polymorphisms, encapsulation, etc. in the programming.
 The main concept of OOPs is to bind the data and the functions that work on that together as a single unit so that no other part of the code can access this data.


Q2. Where does an inheritance search look for an attribute?

A) Where does an inheritance search look for an attribute? An inheritance search looks for an attribute first in the instance object, then in the class, the instance was created from,
 then in all higher superclasses, progressing from left to right (by default). The search stops at the first place the attribute is found.


Q3. How do you distinguish between a class object and an instance object?

A) The basic concept of OOP is this: Class >> Object >> Instance. The class = the blue print. The Object is an actual thing that is built based on the 'blue print' (like the house). 
 An instance is a virtual copy (but not a real copy) of the object.


Q4. What makes the first argument in a class’s method function special?

A) The calling process is automatic while the receiving process is not (its explicit). This is the reason the first parameter of a function in class must be the object itself. 
 Writing this parameter as self is merely a convention. It is not a keyword and has no special meaning in Python.


Q5. What is the purpose of the init method?

A) The __init__ method is the Python equivalent of the C++ constructor in an object-oriented approach. The __init__ function is called every time an object is created from a class. 
 The __init__ method lets the class initialize the object's attributes and serves no other purpose


Q6. What is the process for creating a class instance?

A) To create instances of a class, you call the class using the class name and pass in whatever arguments its __init__ method accepts


Q7. What is the process for creating a class?

A) In Python, a class can be created by using the keyword class, followed by the class name. The syntax to create a class is given below.

Syntax:

class ClassName:    
    #statement_suite     


Q8. How would you define the superclasses of a class?

A) A superclass is the class from which many subclasses can be created. The subclasses inherit the characteristics of a superclass. The superclass is also known as the parent class or base class. 
In the above example, Vehicle is the Superclass and its subclasses are Car, Truck and Motorcycle


Q9. What is the relationship between classes and modules?

A) Modules are collections of methods and constants. They cannot generate instances. Classes may generate instances (objects), and have per-instance state (instance variables).


Q10. How do you make instances and classes?

A) I)In Python, a class can be created by using the keyword class, followed by the class name.
  II)To create instances of a class, you call the class using the class name and pass in whatever arguments its __init__ method accepts

Example:

class Employee:
   
   empCount = 0

   def __init__(self, name, salary):
      self.name = name
      self.salary = salary
      Employee.empCount += 1
   
   def displayCount(self):
     print "Total Employee %d" % Employee.empCount

   def displayEmployee(self):
      print "Name : ", self.name,  ", Salary: ", self.salary

#This would create first object of Employee class

emp1 = Employee("Zara", 2000)

#This would create second object of Employee class

emp2 = Employee("Manni", 5000)



Q11. Where and how should be class attributes created?

A) A class attribute is shared by all instances of the class. To define a class attribute, you place it outside of the __init__() method.
  Use class_name.class_attribute or object_name.class_attribute to access the value of the class_attribute.
  Use class attributes for storing class contants, track data across all instances, and setting default values for all instances of the class.



Q12. Where and how are instance attributes created?

A) Instance attributes are defined in the __init__() function



Q13. What does the term "self" in a Python class mean?

A) The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.



Q14. How does a Python class handle operator overloading?

A) How does Python handle overloading?
Python does not support function overloading. Suppose we still want to use the feature of functional overloading. In that case, we can set the default values of parameters in the method as None, which won't give an error if that specific value is not passed as an argument while calling the function.



Q15. When do you consider allowing operator overloading of your classes?

A) Operator overloading is mostly useful when you're making a new class that falls into an existing "Abstract Base Class" (ABC) -- indeed, many of the ABCs in standard library module collections rely on the presence of certain special methods (and special methods, one with names starting and ending with double underscores



Q16. What is the most popular form of operator overloading?

A) A very popular and convenient example is the Addition (+) operator. Just think how the '+' operator operates on two numbers and the same operator operates on two strings. It performs “Addition” on numbers whereas it performs “Concatenation” on strings.



Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?

A) Both inheritance and polymorphism are fundamental concepts of object oriented programming. These concepts help us to create code that can be extended and easily maintainable



Q18. Describe three applications for exception processing.

A) There are mainly three kinds of distinguishable errors in Python: syntax errors, exceptions, and logical errors.



Q19. What happens if you don't do something extra to treat an exception?

A) When an exception occurred, if you don't handle it, the program terminates abruptly and the code past the line that caused the exception will not get executed.



Q20. What are your options for recovering from an exception in your script?

A) You can also provide a generic except clause, which handles any exception. After the except clause(s), you can include an else-clause. 
  The code in the else-block executes if the code in the try: block does not raise an exception. The else-block is a good place for code that does not need the try: block's protection.



Q21. Describe two methods for triggering exceptions in your script.

A) There are two methods to handle Python exceptions:
  Try – This method catches the exceptions raised by the program. 
  Raise – Triggers an exception manually using custom exceptions.



Q22. Identify two methods for specifying actions to be executed at termination time, regardless of whether or not an exception exists.

A)The two methods are :
   I)finally
  II)else



Q23. What is the purpose of the try statement?

A) The try statement allows you to define a block of code to be tested for errors while it is being executed. 
   The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.



Q24. What are the two most popular try statement variations?

A)  There are two other optional segments to a try block: else and finally . Both of these optional blocks will come after the try and the except .



Q25. What is the purpose of the raise statement?

A) The raise keyword is used to raise an exception. You can define what kind of error to raise, and the text to print to the user.



Q26. What does the assert statement do, and what other statement is it like?

A) assert statement takes an expression and optional message. assert statement is used to check types, values of argument and the output of the function. 
assert statement is used as debugging tool as it halts the program at the point where an error occurs.



Q27. What is the purpose of the with/as argument, and what other statement is it like?

A) The with statement is a replacement for commonly used try/finally error-handling statements. A common example of using the with statement is opening a file. To open and write to a file in Python, you can use the with statement as follows:

with open("example.txt", "w") as file:
    file.write("Hello World!")



Q28. What are *args, **kwargs?

A) *args specifies the number of non-keyworded arguments that can be passed and the operations that can be performed on the function in Python whereas
  **kwargs is a variable number of keyworded arguments that can be passed to a function that can perform dictionary operations.



Q29. How can I pass optional or keyword parameters from one function to another?

A) To pass, collect the arguments using the * and ** in the function’s parameter list. Through this, you will get the positional arguments as a tuple and the keyword arguments as a dictionary.
 Pass these arguments when calling another function by using * and ** −

Example:
def f(a, *args, **kwargs):
   ...
   #kwTo pass, collect the arguments using the * and ** in the function’s parameter list. Through this, you will get the positional arguments as a tuple and the keyword arguments as a dictionary. Pass these arguments when calling another function by using * and ** −

args['width'] = '14.3c'
   ...
   g(a, *args, **kwargs)



Q30. What are Lambda Functions?

A) A lambda function is a small anonymous function.

A lambda function can take any number of arguments, but can only have one expression.

Syntax:

lambda arguments : expression

Example
Add 10 to argument a, and return the result:

x = lambda a : a + 10
print(x(5))

#output: 15



Q31. Explain Inheritance in Python with an example?

A) Inheritance allows us to define a class that inherits all the methods and properties from another class.

   The parent class is the class being inherited from, also called base class.

   A child class is the class that inherits from another class, also called derived class.

Example:
#Base class
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#child class
class Student(Person):
  pass

#Use the Student class to create an object, and then execute the printname method:

x = Student("Mike", "Olsen")
x.printname()

#output: Mike Olsen


Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?

A) The output would be func() method from class A

Example:

class A:
    
    def func(self):
        print("class A")

class B:
   
    def func(self):
        print("class B")

class C(A,B):
    
    def diplay(self):
        print("class C")

#object creation

emp=C()  
emp.func()

#output:

class A



Q33. Which methods/functions do we use to determine the type of instance and inheritance?

A) Use isinstance() to check an instance's type: isinstance(obj, int) will be True only if obj.__class__ is int or some class derived from int.

   Use issubclass() to check class inheritance: issubclass(bool, int) is True since bool is a subclass of int.



Q34.Explain the use of the 'nonlocal' keyword in Python.

A) The nonlocal keyword is used to work with variables inside nested functions, where the variable should not belong to the inner function. Use the keyword nonlocal to declare that the variable is not local.


Q35. What is the global keyword?

A) The global keyword is used to create global variables from a no-global scope, e.g. inside a function.